using OfficeOpenXml;
using OfficeOpenXml.Style;
using System;
using System.ComponentModel.Composition;
using System.Data;
using System.Drawing;
using Trx2Any.Common.Interfaces;
using Trx2Any.Common.TestBase;
using iTextSharp.text.pdf;
using iTextSharp.text;
using System.IO;
using Trx2Any.ExportableFormats.Library;

namespace Trx2Any.ExportableFormats
{
    [Export(typeof (IExportableFormat))]
    [ExportableFormatMetadata(FormatName = "pdf")]
    public class ExportToPdf : IExportableFormat
    {
        public bool ExportData(TestSummary testSummaryCollection,
                               UnitTestResultCollection unitTestResultCollection,
                               string fileName, bool isIncludeOutput)
        {
            GenerateReport(unitTestResultCollection, testSummaryCollection, fileName, isIncludeOutput);
            return true;
        }

        private static void GenerateReport(UnitTestResultCollection unitTestResultCollection,
                                           TestSummary testSummaryCollection, string fileName, bool isIncludeOutput)
        {
            var file = new System.IO.FileInfo(fileName);
            if (file.Exists)
                file.Delete();
            using (var p = new Document())
            {

                //set the workbook properties and add a default sheet in it
                PdfWriter.GetInstance(p, new FileStream(fileName, FileMode.Create));
                SetWorkbookProperties(p);
                ////Create a sheet
                p.Open();
                p.AddTitle(unitTestResultCollection.CollectionName.ToString() + " - Test Report");
                p.Add(new Paragraph(unitTestResultCollection.CollectionName + " - Trx2Any Report"));
                BaseFont bfTimes = BaseFont.CreateFont(BaseFont.TIMES_ROMAN, BaseFont.CP1252, false);
                var times = new iTextSharp.text.Font(bfTimes, 8, iTextSharp.text.Font.ITALIC, iTextSharp.text.BaseColor.RED);
                p.Add(new Paragraph("This is a report generated by trx2any",times));


                //ExcelWorksheet ws = CreateSheet(p, unitTestResultCollection.CollectionName);
                DataTable dt = CommonUtilities.CreateDataTable(unitTestResultCollection, isIncludeOutput);

                
                //Create Summary Table
                CreateSummaryHeaders(p, testSummaryCollection);

                CreateHeader(p, dt);
                //CreateData(ws, ref rowIndex, dt);

                //ws.Column(dt.Columns.Count).Width = 100;
                //p.Save();
                p.Close();
            }
        }

        private static void CreateSummaryHeaders(Document ws, TestSummary collection)
        {
            PdfPTable table = new PdfPTable(4);
            PdfPCell headerCell = new PdfPCell(new Phrase("Summary"));
            headerCell.Colspan = 4;
            headerCell.HorizontalAlignment = 1; //0=Left, 1=Centre, 2=Right
            headerCell.BackgroundColor = BaseColor.GREEN;
            table.AddCell(headerCell);
            
            table.AddCell("TotalTestCaseRun");
            table.AddCell("Passed");
            table.AddCell("Failed");
            table.AddCell("Inconclusive");

            table.AddCell(collection.TotalTestCaseRun.ToString());
            table.AddCell(collection.Passed.ToString());
            table.AddCell(collection.Failed.ToString());
            table.AddCell(collection.Inconclusive.ToString());

            table.SpacingBefore = 20f;
            table.SpacingAfter = 20f;

            ws.Add(table);
        }

        /// <summary>
        /// Sets the workbook properties and adds a default sheet.
        /// </summary>
        /// <param name="p">The p.</param>
        /// <returns></returns>
        private static void SetWorkbookProperties(Document p)
        {
            //Here setting some document properties
            //p.Workbook.Properties.Author = "trx2Any";
            //p.Workbook.Properties.Title = "Trx2ExcelReports";
            p.AddAuthor("trx2any");
            p.AddTitle("Trx2ExcelReports");
            p.SetPageSize(PageSize.A2);
        }

        /// <summary>
        /// Creates the data table with some dummy data.
        /// </summary>
        /// <returns>DataTable</returns>
        

        private static void CreateHeader(Document ws, DataTable dt)
        {
            PdfPTable table = new PdfPTable(dt.Columns.Count);
            PdfPCell headerCell = new PdfPCell(new Phrase("Test Case Details"));
            headerCell.Colspan = dt.Columns.Count;
            headerCell.HorizontalAlignment = 1;
            headerCell.BackgroundColor = BaseColor.GREEN;
            table.AddCell(headerCell);

            table.SpacingBefore = 20f;
            table.SpacingAfter = 20f;


            //Creating Headers
            foreach (DataColumn dc in dt.Columns) 
            {
                var cell = new PdfPCell();

                //Setting the background color of header cells to Gray
                cell.BackgroundColor = BaseColor.LIGHT_GRAY;

                //Setting Value in cell
                cell.Phrase = new Phrase(dc.ColumnName);
                table.AddCell(cell);

            }

            //Create Data
            foreach (DataRow dr in dt.Rows) // Adding Data into rows
            {
                foreach (DataColumn dc in dt.Columns)
                {
                    var cell = new PdfPCell();
                    cell.Phrase = new Phrase(dr[dc.ColumnName].ToString());
                    //Setting Value in cell
    
                    //cell.Style.ShrinkToFit = true;
                    cell.NoWrap = false;
                    //Setting borders of cell
                    table.AddCell(cell);
                }
            }

            ws.Add(table);

        }
    }
}